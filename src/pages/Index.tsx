import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';

interface Room {
  id: string;
  name: string;
  description: string;
  riddle: Riddle;
  connections: string[];
  emoji: string;
  solved: boolean;
}

interface Riddle {
  id: number;
  question: string;
  options: string[];
  correctAnswer: number;
  points: number;
}

interface Achievement {
  id: string;
  title: string;
  description: string;
  unlocked: boolean;
  icon: string;
}

interface LeaderboardEntry {
  name: string;
  score: number;
  rooms: number;
}

const riddles: Riddle[] = [
  {
    id: 1,
    question: "–°—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è. –ß—Ç–æ —ç—Ç–æ?",
    options: ["–°–æ–ª–Ω—Ü–µ", "–ß–∞—Å—ã", "–ö–∞–ª–µ–Ω–¥–∞—Ä—å", "–¢–µ–Ω—å"],
    correctAnswer: 1,
    points: 100
  },
  {
    id: 2,
    question: "–ß—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–ª–∞–∂–Ω—ã–º, –∫–æ–≥–¥–∞ —Å—É—à–∏—Ç?",
    options: ["–í–æ–¥–∞", "–ü–æ–ª–æ—Ç–µ–Ω—Ü–µ", "–í–µ—Ç–µ—Ä", "–û–≥–æ–Ω—å"],
    correctAnswer: 1,
    points: 150
  },
  {
    id: 3,
    question: "–ò–º–µ–µ—Ç —Ä–æ—Ç, –Ω–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç. –ò–º–µ–µ—Ç –ª–æ–∂–µ, –Ω–æ –Ω–µ —Å–ø–∏—Ç. –ß—Ç–æ —ç—Ç–æ?",
    options: ["–ü–µ—â–µ—Ä–∞", "–†–µ–∫–∞", "–î–æ—Ä–æ–≥–∞", "–ì–æ—Ä–∞"],
    correctAnswer: 1,
    points: 200
  },
  {
    id: 4,
    question: "–ß–µ–º –±–æ–ª—å—à–µ –∏–∑ –Ω–µ—ë –±–µ—Ä—ë—à—å, —Ç–µ–º –±–æ–ª—å—à–µ –æ–Ω–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è?",
    options: ["–Ø–º–∞", "–î—ã—Ä–∞", "–ü—É—Å—Ç–æ—Ç–∞", "–¢–µ–Ω—å"],
    correctAnswer: 0,
    points: 250
  },
  {
    id: 5,
    question: "–í—Å–µ–≥–¥–∞ –≥–æ–ª–æ–¥–Ω—ã–π, –≤—Å—ë –ø–æ–∂–∏—Ä–∞–µ—Ç. –ö–æ—Å–Ω—ë—Ç—Å—è –≤–æ–¥—ã - —É–º–∏—Ä–∞–µ—Ç?",
    options: ["–í—É–ª–∫–∞–Ω", "–û–≥–æ–Ω—å", "–î—Ä–∞–∫–æ–Ω", "–ú–æ–ª–Ω–∏—è"],
    correctAnswer: 1,
    points: 300
  }
];

const createRooms = (): Room[] => [
  {
    id: 'entrance',
    name: '–ì–ª–∞–≤–Ω—ã–π –ó–∞–ª',
    description: '–û–≥—Ä–æ–º–Ω—ã–π –∑–∞–ª —Å –≤—ã—Å–æ–∫–∏–º–∏ –ø–æ—Ç–æ–ª–∫–∞–º–∏. –§–∞–∫–µ–ª—ã –æ—Å–≤–µ—â–∞—é—Ç –¥—Ä–µ–≤–Ω–∏–µ –≥–æ–±–µ–ª–µ–Ω—ã –Ω–∞ —Å—Ç–µ–Ω–∞—Ö.',
    riddle: riddles[0],
    connections: ['library', 'armory'],
    emoji: 'üè∞',
    solved: false
  },
  {
    id: 'library',
    name: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞',
    description: '–ü—ã–ª—å–Ω—ã–µ –∫–Ω–∏–≥–∏ –∑–∞–ø–æ–ª–Ω—è—é—Ç –ø–æ–ª–∫–∏ –æ—Ç –ø–æ–ª–∞ –¥–æ –ø–æ—Ç–æ–ª–∫–∞. –ü–∞—Ö–Ω–µ—Ç —Å—Ç–∞—Ä–æ–π –±—É–º–∞–≥–æ–π.',
    riddle: riddles[1],
    connections: ['entrance', 'tower'],
    emoji: 'üìö',
    solved: false
  },
  {
    id: 'armory',
    name: '–û—Ä—É–∂–µ–π–Ω–∞—è',
    description: '–°—Ç–µ–Ω—ã —É–≤–µ—à–∞–Ω—ã –º–µ—á–∞–º–∏ –∏ —â–∏—Ç–∞–º–∏. –î–æ—Å–ø–µ—Ö–∏ —Å—Ç–æ—è—Ç —Å–ª–æ–≤–Ω–æ —Å—Ç—Ä–∞–∂–∏.',
    riddle: riddles[2],
    connections: ['entrance', 'dungeon'],
    emoji: '‚öîÔ∏è',
    solved: false
  },
  {
    id: 'tower',
    name: '–ë–∞—à–Ω—è –ú–∞–≥–∞',
    description: '–ú–∞–≥–∏—á–µ—Å–∫–∏–µ —Ä—É–Ω—ã —Å–≤–µ—Ç—è—Ç—Å—è –Ω–∞ –ø–æ–ª—É. –í –≤–æ–∑–¥—É—Ö–µ –≤–∏—Ç–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—è –¥—Ä–µ–≤–Ω–∏—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.',
    riddle: riddles[3],
    connections: ['library', 'treasure'],
    emoji: 'üîÆ',
    solved: false
  },
  {
    id: 'dungeon',
    name: '–ü–æ–¥–∑–µ–º–µ–ª—å–µ',
    description: '–•–æ–ª–æ–¥–Ω–æ –∏ —Å—ã—Ä–æ. –ö–∞–ø–ª–∏ –≤–æ–¥—ã –ø–∞–¥–∞—é—Ç —Å–æ —Å–≤–æ–¥–æ–≤. –ì–¥–µ-—Ç–æ —Å–∫—Ä–∏–ø—è—Ç —Ü–µ–ø–∏.',
    riddle: riddles[4],
    connections: ['armory', 'treasure'],
    emoji: '‚õìÔ∏è',
    solved: false
  },
  {
    id: 'treasure',
    name: '–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞',
    description: '–ë–ª–µ—Å–∫ –∑–æ–ª–æ—Ç–∞ –∏ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –æ—Å–ª–µ–ø–ª—è–µ—Ç –≥–ª–∞–∑–∞. –¢—ã –Ω–∞—à—ë–ª –≥–ª–∞–≤–Ω–æ–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ –∑–∞–º–∫–∞!',
    riddle: { id: 6, question: '', options: [], correctAnswer: 0, points: 500 },
    connections: ['tower', 'dungeon'],
    emoji: 'üíé',
    solved: false
  }
];

const initialAchievements: Achievement[] = [
  { id: 'first', title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏', description: '–í–æ–π–¥–∏ –≤ –∑–∞–º–æ–∫', unlocked: false, icon: 'Castle' },
  { id: 'explorer', title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', description: '–ü–æ—Å–µ—Ç–∏ 3 –∫–æ–º–Ω–∞—Ç—ã', unlocked: false, icon: 'Map' },
  { id: 'complete', title: '–í–ª–∞—Å—Ç–µ–ª–∏–Ω –∑–∞–º–∫–∞', description: '–ù–∞–π–¥–∏ —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—É', unlocked: false, icon: 'Trophy' },
  { id: 'perfect', title: '–ú—É–¥—Ä–µ—Ü', description: '–†–µ—à–∏ –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏ –±–µ–∑ –æ—à–∏–±–æ–∫', unlocked: false, icon: 'Award' }
];

const leaderboardData: LeaderboardEntry[] = [
  { name: "–í–µ–ª–∏–∫–∏–π –ú–∞–≥", score: 1500, rooms: 6 },
  { name: "–†—ã—Ü–∞—Ä—å", score: 1200, rooms: 6 },
  { name: "–ò—Å–∫–∞—Ç–µ–ª—å", score: 1000, rooms: 5 },
  { name: "–°—Ç—Ä–∞–Ω–Ω–∏–∫", score: 750, rooms: 4 },
  { name: "–ù–æ–≤–∏—á–æ–∫", score: 500, rooms: 3 }
];

type Screen = 'menu' | 'game' | 'achievements' | 'leaderboard' | 'rules';

export default function Index() {
  const [screen, setScreen] = useState<Screen>('menu');
  const [rooms, setRooms] = useState<Room[]>(createRooms());
  const [currentRoomId, setCurrentRoomId] = useState('entrance');
  const [visitedRooms, setVisitedRooms] = useState<string[]>(['entrance']);
  const [score, setScore] = useState(0);
  const [lives, setLives] = useState(3);
  const [streak, setStreak] = useState(0);
  const [achievements, setAchievements] = useState<Achievement[]>(initialAchievements);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [showResult, setShowResult] = useState(false);
  const [isCorrect, setIsCorrect] = useState(false);
  const [gameOver, setGameOver] = useState(false);
  const [perfectRun, setPerfectRun] = useState(true);

  const currentRoom = rooms.find(r => r.id === currentRoomId)!;

  useEffect(() => {
    if (visitedRooms.length === 1) {
      unlockAchievement('first');
    }
    if (visitedRooms.length === 3) {
      unlockAchievement('explorer');
    }
    if (currentRoomId === 'treasure') {
      unlockAchievement('complete');
      if (perfectRun) {
        unlockAchievement('perfect');
      }
    }
  }, [visitedRooms, currentRoomId, perfectRun]);

  const unlockAchievement = (id: string) => {
    setAchievements(prev => prev.map(a => 
      a.id === id ? { ...a, unlocked: true } : a
    ));
  };

  const handleAnswer = (answerIndex: number) => {
    if (showResult || currentRoom.solved) return;
    
    setSelectedAnswer(answerIndex);
    const correct = answerIndex === currentRoom.riddle.correctAnswer;
    setIsCorrect(correct);
    setShowResult(true);

    if (correct) {
      setScore(prev => prev + currentRoom.riddle.points);
      setStreak(prev => prev + 1);
      setRooms(prev => prev.map(r => 
        r.id === currentRoomId ? { ...r, solved: true } : r
      ));
    } else {
      setLives(prev => prev - 1);
      setStreak(0);
      setPerfectRun(false);
      
      if (lives - 1 <= 0) {
        setGameOver(true);
      }
    }
  };

  const moveToRoom = (roomId: string) => {
    setCurrentRoomId(roomId);
    if (!visitedRooms.includes(roomId)) {
      setVisitedRooms(prev => [...prev, roomId]);
    }
    setSelectedAnswer(null);
    setShowResult(false);
  };

  const resetGame = () => {
    setRooms(createRooms());
    setCurrentRoomId('entrance');
    setVisitedRooms(['entrance']);
    setScore(0);
    setLives(3);
    setStreak(0);
    setSelectedAnswer(null);
    setShowResult(false);
    setGameOver(false);
    setPerfectRun(true);
  };

  const renderMenu = () => (
    <div className="min-h-screen bg-background flex items-center justify-center p-4">
      <Card className="w-full max-w-2xl p-8 bg-card border-4 border-primary">
        <div className="text-center space-y-8">
          <h1 className="font-pixel text-2xl md:text-4xl text-primary animate-blink">
            üè∞ –ó–ê–ú–û–ö –ó–ê–ì–ê–î–û–ö
          </h1>
          <div className="space-y-4">
            <Button 
              onClick={() => setScreen('game')}
              className="w-full font-pixel text-sm md:text-base h-14 bg-primary hover:bg-primary/80 text-primary-foreground border-2 border-primary-foreground"
            >
              <Icon name="Play" className="mr-2" size={20} />
              –ù–ê–ß–ê–¢–¨ –ò–ì–†–£
            </Button>
            <Button 
              onClick={() => setScreen('achievements')}
              className="w-full font-pixel text-sm md:text-base h-14 bg-secondary hover:bg-secondary/80 text-secondary-foreground border-2 border-secondary-foreground"
            >
              <Icon name="Trophy" className="mr-2" size={20} />
              –î–û–°–¢–ò–ñ–ï–ù–ò–Ø
            </Button>
            <Button 
              onClick={() => setScreen('leaderboard')}
              className="w-full font-pixel text-sm md:text-base h-14 bg-accent hover:bg-accent/80 text-accent-foreground border-2 border-accent-foreground"
            >
              <Icon name="Medal" className="mr-2" size={20} />
              –õ–ò–î–ï–†–´
            </Button>
            <Button 
              onClick={() => setScreen('rules')}
              className="w-full font-pixel text-sm md:text-base h-14 bg-muted hover:bg-muted/80 text-muted-foreground border-2 border-muted-foreground"
            >
              <Icon name="BookOpen" className="mr-2" size={20} />
              –ü–†–ê–í–ò–õ–ê
            </Button>
          </div>
        </div>
      </Card>
    </div>
  );

  const renderGame = () => {
    if (gameOver) {
      return (
        <div className="min-h-screen bg-background flex items-center justify-center p-4">
          <Card className="w-full max-w-2xl p-8 bg-card border-4 border-primary">
            <div className="text-center space-y-6">
              <h2 className="font-pixel text-2xl md:text-3xl text-primary">
                {lives > 0 ? 'üèÜ –ü–û–ë–ï–î–ê!' : 'üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï'}
              </h2>
              <div className="space-y-4">
                <div className="font-pixel text-lg text-foreground">
                  –°–ß–ï–¢: {score}
                </div>
                <div className="font-pixel text-sm text-muted-foreground">
                  –ö–û–ú–ù–ê–¢ –ü–û–°–ï–©–ï–ù–û: {visitedRooms.length}/{rooms.length}
                </div>
              </div>
              <div className="flex gap-4">
                <Button 
                  onClick={() => {
                    resetGame();
                  }}
                  className="flex-1 font-pixel text-sm h-12 bg-primary hover:bg-primary/80"
                >
                  –ï–©–ï –†–ê–ó
                </Button>
                <Button 
                  onClick={() => {
                    resetGame();
                    setScreen('menu');
                  }}
                  className="flex-1 font-pixel text-sm h-12 bg-secondary hover:bg-secondary/80"
                >
                  –ú–ï–ù–Æ
                </Button>
              </div>
            </div>
          </Card>
        </div>
      );
    }
    
    return (
      <div className="min-h-screen bg-background p-4">
        <div className="max-w-6xl mx-auto space-y-6 py-8">
          <div className="flex justify-between items-center">
            <Button 
              onClick={() => setScreen('menu')}
              className="font-pixel text-xs bg-muted hover:bg-muted/80"
            >
              <Icon name="ArrowLeft" className="mr-2" size={16} />
              –ú–ï–ù–Æ
            </Button>
            <div className="flex gap-4 items-center font-pixel text-xs">
              <div className="flex gap-1">
                {Array.from({ length: 3 }).map((_, i) => (
                  <Icon 
                    key={i} 
                    name="Heart" 
                    className={i < lives ? 'text-destructive' : 'text-muted'}
                    size={20}
                  />
                ))}
              </div>
              <div className="text-primary">–°–ß–ï–¢: {score}</div>
            </div>
          </div>

          <div className="grid md:grid-cols-3 gap-6">
            <Card className="md:col-span-2 p-6 bg-card border-4 border-primary">
              <div className="space-y-4">
                <div className="relative bg-muted/20 border-2 border-muted p-8 mb-4 min-h-32">
                  <div className="text-center">
                    <div className="text-6xl mb-2 animate-float">{currentRoom.emoji}</div>
                    <div className="absolute bottom-6 left-1/2 -translate-x-1/2 text-4xl animate-walk">
                      üßô‚Äç‚ôÇÔ∏è
                    </div>
                  </div>
                </div>
                <div>
                  <h2 className="font-pixel text-lg text-primary">{currentRoom.name}</h2>
                  <p className="font-pixel text-xs text-muted-foreground mt-2 leading-relaxed">
                    {currentRoom.description}
                  </p>
                </div>

                {currentRoom.id !== 'treasure' && !currentRoom.solved && (
                  <>
                    <div className="border-t-2 border-muted pt-4">
                      <Badge className="font-pixel text-xs bg-accent mb-4">
                        +{currentRoom.riddle.points} –û–ß–ö–û–í
                      </Badge>
                      <h3 className="font-pixel text-sm text-foreground leading-relaxed mb-4">
                        {currentRoom.riddle.question}
                      </h3>
                      <div className="grid gap-3">
                        {currentRoom.riddle.options.map((option, index) => {
                          let buttonClass = "w-full font-pixel text-xs h-auto py-3 px-4 border-2 ";
                          
                          if (showResult) {
                            if (index === currentRoom.riddle.correctAnswer) {
                              buttonClass += "bg-secondary/30 border-secondary text-secondary-foreground";
                            } else if (index === selectedAnswer) {
                              buttonClass += "bg-destructive/30 border-destructive text-destructive-foreground";
                            } else {
                              buttonClass += "bg-muted/30 border-muted text-muted-foreground";
                            }
                          } else {
                            buttonClass += "bg-primary hover:bg-primary/80 border-primary-foreground text-primary-foreground";
                          }

                          return (
                            <Button
                              key={index}
                              onClick={() => handleAnswer(index)}
                              disabled={showResult}
                              className={buttonClass}
                            >
                              {option}
                            </Button>
                          );
                        })}
                      </div>

                      {showResult && (
                        <div className="text-center mt-4 animate-pixelate">
                          <p className={`font-pixel text-sm ${isCorrect ? 'text-secondary' : 'text-destructive'}`}>
                            {isCorrect ? '‚úì –ü–†–ê–í–ò–õ–¨–ù–û!' : '‚úó –ù–ï–í–ï–†–ù–û!'}
                          </p>
                        </div>
                      )}
                    </div>
                  </>
                )}

                {currentRoom.solved && (
                  <div className="border-t-2 border-secondary pt-4">
                    <div className="text-center">
                      <Icon name="Check" className="mx-auto text-secondary mb-2" size={32} />
                      <p className="font-pixel text-xs text-secondary">–ó–ê–ì–ê–î–ö–ê –†–ï–®–ï–ù–ê</p>
                    </div>
                  </div>
                )}

                {currentRoom.id === 'treasure' && (
                  <div className="border-t-2 border-accent pt-4">
                    <div className="text-center space-y-4">
                      <div className="text-6xl animate-blink">üíé</div>
                      <p className="font-pixel text-sm text-accent">–¢–´ –ù–ê–®–Å–õ –°–û–ö–†–û–í–ò–©–ï!</p>
                      <p className="font-pixel text-xs text-muted-foreground">+500 –û–ß–ö–û–í</p>
                    </div>
                  </div>
                )}

                <div className="border-t-2 border-muted pt-4">
                  <p className="font-pixel text-xs text-muted-foreground mb-3">–ö–£–î–ê –ü–û–ô–¢–ò:</p>
                  <div className="grid gap-2">
                    {currentRoom.connections.map(connId => {
                      const connRoom = rooms.find(r => r.id === connId)!;
                      return (
                        <Button
                          key={connId}
                          onClick={() => moveToRoom(connId)}
                          className="w-full font-pixel text-xs h-auto py-3 px-4 bg-muted hover:bg-muted/80 border-2 border-muted-foreground"
                        >
                          <span className="mr-2">{connRoom.emoji}</span>
                          {connRoom.name}
                          {connRoom.solved && <span className="ml-2 text-secondary">‚úì</span>}
                        </Button>
                      );
                    })}
                  </div>
                </div>
              </div>
            </Card>

            <div className="space-y-4">
              <Card className="p-4 bg-card border-4 border-secondary">
                <h3 className="font-pixel text-xs text-secondary mb-3">–ö–ê–†–¢–ê –ó–ê–ú–ö–ê</h3>
                <div className="grid grid-cols-2 gap-2 relative">
                  {rooms.map(room => (
                    <button
                      key={room.id}
                      onClick={() => moveToRoom(room.id)}
                      disabled={!visitedRooms.includes(room.id) && !currentRoom.connections.includes(room.id)}
                      className={`p-3 border-2 font-pixel text-xs transition-all relative ${
                        room.id === currentRoomId 
                          ? 'border-primary bg-primary/20 scale-105' 
                          : visitedRooms.includes(room.id)
                          ? 'border-muted bg-muted/20 hover:bg-muted/40'
                          : 'border-muted/30 bg-muted/10 opacity-50 cursor-not-allowed'
                      }`}
                    >
                      <div className="text-2xl mb-1">{room.emoji}</div>
                      <div className="text-[8px] leading-tight">{room.name}</div>
                      {room.solved && <div className="text-secondary text-xs mt-1">‚úì</div>}
                      {room.id === currentRoomId && (
                        <div className="absolute -top-2 -right-2 text-2xl animate-walk">
                          üßô‚Äç‚ôÇÔ∏è
                        </div>
                      )}
                    </button>
                  ))}
                </div>
              </Card>

              <Card className="p-4 bg-card border-4 border-accent">
                <h3 className="font-pixel text-xs text-accent mb-3">–°–¢–ê–¢–ò–°–¢–ò–ö–ê</h3>
                <div className="space-y-2 font-pixel text-xs">
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">–ü–æ—Å–µ—â–µ–Ω–æ:</span>
                    <span className="text-foreground">{visitedRooms.length}/{rooms.length}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">–†–µ—à–µ–Ω–æ:</span>
                    <span className="text-foreground">{rooms.filter(r => r.solved).length}/{rooms.length - 1}</span>
                  </div>
                  <Progress value={(rooms.filter(r => r.solved).length / (rooms.length - 1)) * 100} className="h-2 mt-2" />
                </div>
              </Card>

              {streak > 0 && (
                <Card className="p-4 bg-accent/20 border-4 border-accent">
                  <div className="text-center">
                    <Icon name="Flame" className="mx-auto text-accent mb-2 animate-blink" size={24} />
                    <p className="font-pixel text-xs text-accent">–°–ï–†–ò–Ø: {streak}</p>
                  </div>
                </Card>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  };

  const renderAchievements = () => (
    <div className="min-h-screen bg-background p-4">
      <div className="max-w-3xl mx-auto space-y-6 py-8">
        <Button 
          onClick={() => setScreen('menu')}
          className="font-pixel text-xs bg-muted hover:bg-muted/80"
        >
          <Icon name="ArrowLeft" className="mr-2" size={16} />
          –ù–ê–ó–ê–î
        </Button>

        <h2 className="font-pixel text-2xl text-primary text-center">–î–û–°–¢–ò–ñ–ï–ù–ò–Ø</h2>

        <div className="grid gap-4">
          {achievements.map((achievement) => (
            <Card 
              key={achievement.id} 
              className={`p-6 border-4 transition-all ${
                achievement.unlocked 
                  ? 'border-primary bg-card animate-pixelate' 
                  : 'border-muted bg-muted/20 opacity-50'
              }`}
            >
              <div className="flex items-start gap-4">
                <div className={`p-3 rounded ${achievement.unlocked ? 'bg-primary' : 'bg-muted'}`}>
                  <Icon 
                    name={achievement.icon as any} 
                    size={24} 
                    className={achievement.unlocked ? 'text-primary-foreground' : 'text-muted-foreground'}
                  />
                </div>
                <div className="flex-1">
                  <h3 className="font-pixel text-sm text-foreground mb-2">
                    {achievement.title}
                  </h3>
                  <p className="font-pixel text-xs text-muted-foreground">
                    {achievement.description}
                  </p>
                </div>
                {achievement.unlocked && (
                  <Icon name="Check" className="text-secondary" size={24} />
                )}
              </div>
            </Card>
          ))}
        </div>
      </div>
    </div>
  );

  const renderLeaderboard = () => (
    <div className="min-h-screen bg-background p-4">
      <div className="max-w-3xl mx-auto space-y-6 py-8">
        <Button 
          onClick={() => setScreen('menu')}
          className="font-pixel text-xs bg-muted hover:bg-muted/80"
        >
          <Icon name="ArrowLeft" className="mr-2" size={16} />
          –ù–ê–ó–ê–î
        </Button>

        <h2 className="font-pixel text-2xl text-primary text-center">–¢–ê–ë–õ–ò–¶–ê –õ–ò–î–ï–†–û–í</h2>

        <Card className="p-6 bg-card border-4 border-primary">
          <div className="space-y-3">
            {leaderboardData.map((entry, index) => (
              <div 
                key={index}
                className="flex items-center gap-4 p-4 bg-muted/30 border-2 border-muted"
              >
                <div className={`font-pixel text-2xl w-12 text-center ${
                  index === 0 ? 'text-accent' : 
                  index === 1 ? 'text-secondary' : 
                  index === 2 ? 'text-primary' : 
                  'text-muted-foreground'
                }`}>
                  {index + 1}
                </div>
                <div className="flex-1">
                  <div className="font-pixel text-sm text-foreground">{entry.name}</div>
                  <div className="font-pixel text-xs text-muted-foreground">
                    –ö–û–ú–ù–ê–¢: {entry.rooms}
                  </div>
                </div>
                <div className="font-pixel text-lg text-primary">
                  {entry.score}
                </div>
              </div>
            ))}
          </div>
        </Card>

        {score > 0 && (
          <Card className="p-6 bg-secondary/20 border-4 border-secondary">
            <div className="text-center space-y-2">
              <p className="font-pixel text-xs text-muted-foreground">–í–ê–® –°–ß–ï–¢</p>
              <p className="font-pixel text-3xl text-secondary">{score}</p>
            </div>
          </Card>
        )}
      </div>
    </div>
  );

  const renderRules = () => (
    <div className="min-h-screen bg-background p-4">
      <div className="max-w-3xl mx-auto space-y-6 py-8">
        <Button 
          onClick={() => setScreen('menu')}
          className="font-pixel text-xs bg-muted hover:bg-muted/80"
        >
          <Icon name="ArrowLeft" className="mr-2" size={16} />
          –ù–ê–ó–ê–î
        </Button>

        <h2 className="font-pixel text-2xl text-primary text-center">–ü–†–ê–í–ò–õ–ê –ò–ì–†–´</h2>

        <Card className="p-6 bg-card border-4 border-primary space-y-6">
          <div className="space-y-4">
            <div className="flex gap-4 items-start">
              <Icon name="Target" className="text-primary mt-1" size={24} />
              <div>
                <h3 className="font-pixel text-sm text-foreground mb-2">–¶–ï–õ–¨</h3>
                <p className="font-pixel text-xs text-muted-foreground leading-relaxed">
                  –ò—Å—Å–ª–µ–¥—É–π –∑–∞–º–æ–∫, —Ä–µ—à–∏ –∑–∞–≥–∞–¥–∫–∏ –∏ –Ω–∞–π–¥–∏ —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—É
                </p>
              </div>
            </div>

            <div className="flex gap-4 items-start">
              <Icon name="Map" className="text-secondary mt-1" size={24} />
              <div>
                <h3 className="font-pixel text-sm text-foreground mb-2">–ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï</h3>
                <p className="font-pixel text-xs text-muted-foreground leading-relaxed">
                  –•–æ–¥–∏ –º–µ–∂–¥—É –∫–æ–º–Ω–∞—Ç–∞–º–∏ –∑–∞–º–∫–∞. –ö–∞—Ä—Ç–∞ –ø–æ–∫–∞–∂–µ—Ç —Ç–≤–æ–π –ø—É—Ç—å
                </p>
              </div>
            </div>

            <div className="flex gap-4 items-start">
              <Icon name="Brain" className="text-primary mt-1" size={24} />
              <div>
                <h3 className="font-pixel text-sm text-foreground mb-2">–ó–ê–ì–ê–î–ö–ò</h3>
                <p className="font-pixel text-xs text-muted-foreground leading-relaxed">
                  –í –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç–µ –∂–¥—ë—Ç –∑–∞–≥–∞–¥–∫–∞. –†–µ—à–∏ –µ—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ!
                </p>
              </div>
            </div>

            <div className="flex gap-4 items-start">
              <Icon name="Heart" className="text-destructive mt-1" size={24} />
              <div>
                <h3 className="font-pixel text-sm text-foreground mb-2">–ñ–ò–ó–ù–ò</h3>
                <p className="font-pixel text-xs text-muted-foreground leading-relaxed">
                  –£ —Ç–µ–±—è –µ—Å—Ç—å 3 –∂–∏–∑–Ω–∏. –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç = -1 –∂–∏–∑–Ω—å
                </p>
              </div>
            </div>
          </div>
        </Card>

        <Card className="p-6 bg-accent/20 border-4 border-accent">
          <div className="text-center space-y-2">
            <div className="text-4xl">üè∞</div>
            <p className="font-pixel text-xs text-foreground">
              –°–û–í–ï–¢: –ò–°–ü–û–õ–¨–ó–£–ô –ö–ê–†–¢–£ –î–õ–Ø –ë–´–°–¢–†–û–ì–û –ü–ï–†–ï–ú–ï–©–ï–ù–ò–Ø
            </p>
          </div>
        </Card>
      </div>
    </div>
  );

  return (
    <>
      {screen === 'menu' && renderMenu()}
      {screen === 'game' && renderGame()}
      {screen === 'achievements' && renderAchievements()}
      {screen === 'leaderboard' && renderLeaderboard()}
      {screen === 'rules' && renderRules()}
    </>
  );
}